{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Training\\\\Desktop\\\\repologin\\\\login\\\\client\\\\src\\\\component\\\\screen\\\\ResetPasswordScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst ResetPasswordScreen = ({\n  match\n}) => {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  const resetpasswordHandler = async e => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (!password !== confirmPassword) {\n      setPassword('');\n      setConfirmPassword(\"\");\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n      return setError(\"password don't match\");\n    }\n\n    try {\n      const {\n        data\n      } = await axios.put(`/api/auth/passwordreset/${match.params.resetToken}`, {\n        password\n      }, config);\n      setSuccess(data.data);\n    } catch (error) {\n      setError(error.response.data.error);\n      setTimeout(() => {\n        setError(\"\");\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"resetpassword-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: resetpasswordHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"resetpassword-screen__title\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"success-message\",\n        children: [success, /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 73\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"New Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          required: true,\n          id: \"password\",\n          placeholder: \"Enter new password\",\n          autoComplete: \"true\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"confirmpassword\",\n          children: \"Confirm New Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          required: true,\n          id: \"confirmpassword\",\n          placeholder: \"Confirm new password\",\n          autoComplete: \"true\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResetPasswordScreen, \"imNu7i+cu64rhW3fm3LuJad5BNU=\");\n\n_c = ResetPasswordScreen;\nexport default ResetPasswordScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordScreen\");","map":{"version":3,"sources":["C:/Users/Training/Desktop/repologin/login/client/src/component/screen/ResetPasswordScreen.js"],"names":["useState","Link","axios","ResetPasswordScreen","match","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","resetpasswordHandler","e","preventDefault","config","headers","setTimeout","data","put","params","resetToken","response","target","value"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst ResetPasswordScreen = ({ match }) => {\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n    const [success, setSuccess] = useState(\"\")\r\n\r\n    const resetpasswordHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        if (!password !== confirmPassword) {\r\n            setPassword('');\r\n            setConfirmPassword(\"\")\r\n\r\n            setTimeout(() => {\r\n                setError(\"\");\r\n            }, 5000)\r\n            return setError(\"password don't match\");\r\n\r\n        }\r\n\r\n        try {\r\n            const { data } = await axios.put(`/api/auth/passwordreset/${match.params.resetToken}`, { password }, config);\r\n\r\n            setSuccess(data.data);\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.error);\r\n            setTimeout(() => {\r\n                setError(\"\");\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"resetpassword-screen\">\r\n            <form onSubmit={resetpasswordHandler}>\r\n                <h3 className=\"resetpassword-screen__title\">Reset Password</h3>\r\n                {error && <span className=\"error-message\" >{error}</span>}\r\n                {success && (<span className=\"success-message\">{success}<Link to=\"/login\">Login</Link></span>)}\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">New Password: </label>\r\n                    <input type=\"password\" required id=\"password\" placeholder=\"Enter new password\" autoComplete=\"true\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"confirmpassword\">Confirm New Password: </label>\r\n                    <input type=\"password\" required id=\"confirmpassword\" placeholder=\"Confirm new password\" autoComplete=\"true\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Reset Password</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordScreen;"]},"metadata":{},"sourceType":"module"}